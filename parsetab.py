
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightPOWERleftPLUSMINUSleftTIMESDIVIDErightUMINUSCOMMA DIVIDE EQUAL LPAREN MINUS NAME NUMBER PLUS POWER RPAREN TIMESstatement : NAME EQUAL expressionstatement : expressionexpression : LPAREN expression RPARENexpression : NAME LPAREN expression COMMA expression RPARENexpression : NAME LPAREN expression RPARENexpression : expression POWER expressionexpression : expression PLUS expression\n    | expression MINUS expression\n    | expression TIMES expression\n    | expression DIVIDE expressionexpression : MINUS expression %prec UMINUSexpression : NUMBERexpression : NAME'
    
_lr_action_items = {'NAME':([0,4,5,7,8,9,10,11,12,13,25,],[2,15,15,15,15,15,15,15,15,15,15,]),'LPAREN':([0,2,4,5,7,8,9,10,11,12,13,15,25,],[4,8,4,4,4,4,4,4,4,4,4,8,4,]),'MINUS':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,],[5,-13,11,5,5,-12,5,5,5,5,5,5,5,11,-13,-11,11,11,11,-7,-8,-9,-10,-3,5,-5,11,-4,]),'NUMBER':([0,4,5,7,8,9,10,11,12,13,25,],[6,6,6,6,6,6,6,6,6,6,6,]),'$end':([1,2,3,6,15,16,17,19,20,21,22,23,24,26,28,],[0,-13,-2,-12,-13,-11,-1,-6,-7,-8,-9,-10,-3,-5,-4,]),'EQUAL':([2,],[7,]),'POWER':([2,3,6,14,15,16,17,18,19,20,21,22,23,24,26,27,28,],[-13,9,-12,9,-13,-11,9,9,9,-7,-8,-9,-10,-3,-5,9,-4,]),'PLUS':([2,3,6,14,15,16,17,18,19,20,21,22,23,24,26,27,28,],[-13,10,-12,10,-13,-11,10,10,10,-7,-8,-9,-10,-3,-5,10,-4,]),'TIMES':([2,3,6,14,15,16,17,18,19,20,21,22,23,24,26,27,28,],[-13,12,-12,12,-13,-11,12,12,12,12,12,-9,-10,-3,-5,12,-4,]),'DIVIDE':([2,3,6,14,15,16,17,18,19,20,21,22,23,24,26,27,28,],[-13,13,-12,13,-13,-11,13,13,13,13,13,-9,-10,-3,-5,13,-4,]),'RPAREN':([6,14,15,16,18,19,20,21,22,23,24,26,27,28,],[-12,24,-13,-11,26,-6,-7,-8,-9,-10,-3,-5,28,-4,]),'COMMA':([6,15,16,18,19,20,21,22,23,24,26,28,],[-12,-13,-11,25,-6,-7,-8,-9,-10,-3,-5,-4,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expression':([0,4,5,7,8,9,10,11,12,13,25,],[3,14,16,17,18,19,20,21,22,23,27,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> NAME EQUAL expression','statement',3,'p_statement_assign','calc.py',82),
  ('statement -> expression','statement',1,'p_statement_expr','calc.py',89),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','calc.py',103),
  ('expression -> NAME LPAREN expression COMMA expression RPAREN','expression',6,'p_expression_biary_func','calc.py',108),
  ('expression -> NAME LPAREN expression RPAREN','expression',4,'p_expression_unary_func','calc.py',116),
  ('expression -> expression POWER expression','expression',3,'p_expresion_power','calc.py',125),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','calc.py',130),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','calc.py',131),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','calc.py',132),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','calc.py',133),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','calc.py',139),
  ('expression -> NUMBER','expression',1,'p_expression_number','calc.py',144),
  ('expression -> NAME','expression',1,'p_exression_name','calc.py',149),
]
